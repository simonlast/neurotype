diff --git a/README.md b/README.md
index 6bd3df2..8efe996 100644
--- a/README.md
+++ b/README.md
@@ -39,10 +39,21 @@ net.train([{input: { r: 0.03, g: 0.7, b: 0.5 }, output: { black: 1 }},
 var output = net.run({ r: 1, g: 0.4, b: 0 });  // { white: 0.99, black: 0.002 }
 ```
 
-#### Threshold
-The optional second argument to `train()` is the error threshold (default `0.004`), the third is the maximum training iterations (default `20000`).
+#### Options
+`train()` takes a hash of options as its second argument:
 
-The network will train until the training error has gone below the threshold or the max number of iterations has been reached, whichever comes first.
+```javascript
+net.train(data, {
+  errorThresh: 0.004,  // error threshold to reach
+  iterations: 20000,   // maximum training iterations
+  log: true,           // console.log() progress periodically
+  logPeriod: 10        // number of iterations between logging
+})
+```
+
+The network will train until the training error has gone below the threshold (default `0.004`) or the max number of iterations (default `20000`) has been reached, whichever comes first.
+
+By default training won't let you know how its doing until the end, but set `log` to `true` to get periodic updates on the current training error of the network. The training error should decrease every time.
 
 #### Output
 The ouput of `train()` is a hash of information about how the training went:
diff --git a/lib/cross-validate.js b/lib/cross-validate.js
index dd62c71..1c5f71b 100644
--- a/lib/cross-validate.js
+++ b/lib/cross-validate.js
@@ -1,11 +1,11 @@
 var _ = require("underscore")._;
 
-function testPartition(classifierConst, options, trainSet, testSet, errorThresh) {
-  var classifier = new classifierConst(options);
+function testPartition(classifierConst, opts, trainOpts, trainSet, testSet) {
+  var classifier = new classifierConst(opts);
 
   var beginTrain = Date.now();
 
-  var trainingStats = classifier.train(trainSet, errorThresh);
+  var trainingStats = classifier.train(trainSet, trainOpts);
 
   var beginTest = Date.now();
 
@@ -24,7 +24,7 @@ function testPartition(classifierConst, options, trainSet, testSet, errorThresh)
   return stats;
 }
 
-module.exports = function crossValidate(classifierConst, options, data, errorThresh, k) {
+module.exports = function crossValidate(classifierConst, data, opts, trainOpts, k) {
   k = k || 4;
   var size = data.length / k;
 
@@ -50,7 +50,7 @@ module.exports = function crossValidate(classifierConst, options, data, errorThr
     var testSet = dclone.splice(i * size, size);
     var trainSet = dclone;
 
-    var result = testPartition(classifierConst, options, trainSet, testSet, errorThresh);
+    var result = testPartition(classifierConst, opts, trainOpts, trainSet, testSet);
 
     _(avgs).each(function(sum, i) {
       avgs[i] = sum + result[i];
diff --git a/lib/neuralnetwork.js b/lib/neuralnetwork.js
index 079fa25..4191f4c 100644
--- a/lib/neuralnetwork.js
+++ b/lib/neuralnetwork.js
@@ -73,10 +73,14 @@ NeuralNetwork.prototype = {
     return output;
   },
 
-  train: function(data, errorThresh, iterations) {
+  train: function(data, options) {
     data = this.formatData(data);
-    iterations = iterations || 20000;
-    errorThresh = errorThresh || 0.004;
+
+    options = options || {};
+    var iterations = options.iterations || 20000;
+    var errorThresh = options.errorThresh || 0.004;
+    var log = options.log || false;
+    var logPeriod = options.logPeriod || 10;
 
     var inputSize = data[0].input.length;
     var outputSize = data[0].output.length;
@@ -96,6 +100,10 @@ NeuralNetwork.prototype = {
         sum += err;
       }
       error = sum / data.length;
+
+      if (log && (i % logPeriod == 0)) {
+        console.log("iterations:", i, "training error:", error);
+      }
     }
 
     return {
diff --git a/test/unit/errorthresh.js b/test/unit/errorthresh.js
index 964a3a6..94f1218 100644
--- a/test/unit/errorthresh.js
+++ b/test/unit/errorthresh.js
@@ -9,13 +9,21 @@ var data = [{input: [0, 0], output: [0]},
 describe('thresholds' , function() {
   it('train until error threshold reached', function() {
     var net = new brain.NeuralNetwork();
-    var error = net.train(data, 0.2, 100000).error;
+    var error = net.train(data, {
+      errorThresh: 0.2,
+      iterations: 100000
+    }).error;
+
     assert.ok(error < 0.2, "network did not train until error threshold was reached");
   });
 
   it('train until max iterations reached', function() {
     var net = new brain.NeuralNetwork();
-    var error = net.train(data, 0.001, 1).error;
-    assert.ok(error > 0.001, "network trained past max iterations");
+    var stats = net.train(data, {
+      errorThresh: 0.001,
+      iterations: 1
+    });
+
+    assert.equal(stats.iterations, 1);
   })
 })
