diff --git a/lib/cross-validate.js b/lib/cross-validate.js
index 8fb910a..c899722 100644
--- a/lib/cross-validate.js
+++ b/lib/cross-validate.js
@@ -1,11 +1,11 @@
 var _ = require("underscore")._;
 
-function testPartition(classifierConst, options, trainSet, testSet) {
+function testPartition(classifierConst, options, trainSet, testSet, errorThresh) {
   var classifier = new classifierConst(options);
 
   var beginTrain = Date.now();
 
-  var trainingStats = classifier.train(trainSet);
+  var trainingStats = classifier.train(trainSet, errorThresh);
 
   var beginTest = Date.now();
 
@@ -13,21 +13,24 @@ function testPartition(classifierConst, options, trainSet, testSet) {
 
   var endTest = Date.now();
 
-  return {
-    error : testStats.error,
-    misclasses: testStats.misclasses,
+  var stats = _(testStats).extend({
     trainTime : beginTest - beginTrain,
     testTime : endTest - beginTest,
     iterations: trainingStats.iterations,
-    trainError: trainingStats.error
-  };
+    trainError: trainingStats.error,
+    learningRate: classifier.learningRate,
+    hidden: classifier.hiddenSizes
+  });
+  stats.misclasses = [];
+  console.log(stats)
+  return stats;
 }
 
-module.exports = function crossValidate(classifierConst, options, data, k) {
+module.exports = function crossValidate(classifierConst, options, data, errorThresh, k) {
   k = k || 4;
   var size = data.length / k;
 
-  data = _(data).sortBy(function(num){
+  data = _(data).sortBy(function() {
     return Math.random();
   });
 
@@ -36,7 +39,10 @@ module.exports = function crossValidate(classifierConst, options, data, k) {
     trainTime : 0,
     testTime : 0,
     iterations: 0,
-    trainError: 0
+    trainError: 0,
+    precision: 0,
+    accuracy: 0,
+    recall: 0
   };
 
   var misclasses = [];
@@ -46,7 +52,7 @@ module.exports = function crossValidate(classifierConst, options, data, k) {
     var testSet = dclone.splice(i * size, size);
     var trainSet = dclone;
 
-    var result = testPartition(classifierConst, options, trainSet, testSet);
+    var result = testPartition(classifierConst, options, trainSet, testSet, errorThresh);
 
     _(avgs).each(function(sum, i) {
       avgs[i] = sum + result[i];
@@ -66,4 +72,4 @@ module.exports = function crossValidate(classifierConst, options, data, k) {
     avgs: avgs,
     misclasses: _(misclasses).flatten()
   };
-}
+}
\ No newline at end of file
diff --git a/lib/neuralnetwork.js b/lib/neuralnetwork.js
index d0ad3ca..e82b452 100644
--- a/lib/neuralnetwork.js
+++ b/lib/neuralnetwork.js
@@ -75,6 +75,7 @@ NeuralNetwork.prototype = {
 
   train: function(data, errorThresh, iterations) {
     data = this.formatData(data);
+
     iterations = iterations || 20000;
     errorThresh = errorThresh || 0.004;
 
@@ -92,9 +93,14 @@ NeuralNetwork.prototype = {
     for (var i = 0; i < iterations && error > errorThresh; i++) {
       var sum = 0;
       for (var j = 0; j < data.length; j++) {
-        sum += this.trainPattern(data[j].input, data[j].output);
+        var err = this.trainPattern(data[j].input, data[j].output);
+        sum += err;
       }
       error = sum / data.length;
+
+      if (i % 10 == 0) {
+        console.log(i, error);
+      }
     }
 
     return {
@@ -165,7 +171,7 @@ NeuralNetwork.prototype = {
       }
       data = data.map(function(datum) {
         var array = lookup.toArray(this.inputLookup, datum.input)
-        return {input: array, output: datum.output};
+        return _(_(datum).clone()).extend({ input: array });
       }, this);
     }
 
@@ -175,45 +181,92 @@ NeuralNetwork.prototype = {
       }
       data = data.map(function(datum) {
         var array = lookup.toArray(this.outputLookup, datum.output);
-        return {input: datum.input, output: array};
+        return _(_(datum).clone()).extend({ output: array });
       }, this);
     }
     return data;
   },
 
-  test : function(data) {
+  test : function(data, binaryThresh) {
     data = this.formatData(data);
+    binaryThresh = binaryThresh || 0.5;
+
+    // for binary classification problems with one output node
+    var isBinary = data[0].output.length == 1;
+    var falsePos = 0,
+        falseNeg = 0,
+        truePos = 0,
+        trueNeg = 0;
+
+    // for classification problems
+    var misclasses = [];
 
     // run each pattern through the trained network and collect
     // error and misclassification statistics
     var sum = 0;
-    var misclasses = [];
-
     for (var i = 0; i < data.length; i++) {
       var output = this.runInput(data[i].input);
-      var expected = data[i].output;
+      var target = data[i].output;
 
-      var actualClass = output.indexOf(_(output).max());
-      var expectedClass = expected.indexOf(_(expected).max());
+      var actual, expected;
+      if (isBinary) {
+        actual = output[0] > binaryThresh ? 1 : 0;
+        expected = target[0];
+      }
+      else {
+        actual = output.indexOf(_(output).max());
+        expected = target.indexOf(_(target).max());
+      }
 
-      if (actualClass != expectedClass) {
-        misclasses.push({
-          input: data[i].input,
-          actual: actualClass,
-          expected: expectedClass
-        });
+      if (actual != expected) {
+        var misclass = data[i];
+        _(misclass).extend({
+          actual: actual,
+          expected: expected
+        })
+        misclasses.push(misclass);
       }
+
+      if (isBinary) {
+        if (actual == 0 && expected == 0) {
+          trueNeg++;
+        }
+        else if (actual == 1 && expected == 1) {
+          truePos++;
+        }
+        else if (actual == 0 && expected == 1) {
+          falseNeg++;
+        }
+        else if (actual == 1 && expected == 0) {
+          falsePos++;
+        }
+      }
+
       var errors = output.map(function(value, i) {
-        return expected[i] - value;
+        return target[i] - value;
       });
       sum += mse(errors);
     }
     var error = sum / data.length;
 
-    return {
+    var stats = {
       error: error,
       misclasses: misclasses
+    };
+
+    if (isBinary) {
+      _(stats).extend({
+        trueNeg: trueNeg,
+        truePos: truePos,
+        falseNeg: falseNeg,
+        falsePos: falsePos,
+        total: data.length,
+        precision: truePos / (truePos + falsePos),
+        recall: truePos / (truePos + falseNeg),
+        accuracy: (trueNeg + truePos) / data.length
+      })
     }
+    return stats;
   },
 
   toJSON: function() {
